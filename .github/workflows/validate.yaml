name: Validation

# This workflow will run on every push on every branch. It will not be triggered on pull requests.
#   - At some point it will be cut down to only be triggered on source code changes and branches with specific naming.
# 

on: 
  push:
    branches: '*'

# This workflow supports the following additional CI tags:
#   - [skip ci] - skips the whole workflow (available, github implicit)
#   - (wip) [asan] - Runs all unit tests with an adress sanitizer enabled. (wip)
#   - (wip) [benchmark] - Runs benchmarks additionally to unit tests. (wip)
#   - (wip) [snapshot] - Deploys a 'Develop' build to conan on the 'snapshot' channel. (wip)
#   - [all_configs] - Runs all checks on all configurations. (wip, some limitations apply)
#   - [parallel] - Runs every configuration on a separate job. (wip, some limitations apply)

jobs:
  setup_workflow:
    name: Setup workflow
    runs-on: ubuntu-latest
    outputs:
      build_configs: ${{ steps.select_build_configs.outputs.build_configs }}
      # tags: ${{ steps.parse_commits.outputs.tags }}
    steps:
    - id: load_event_payload
      name: Load event payload
      run: |
        PAYLOAD_CONTENT=$(cat $GITHUB_EVENT_PATH)
        PAYLOAD_CONTENT="${PAYLOAD_CONTENT//'%'/'%25'}"
        PAYLOAD_CONTENT="${PAYLOAD_CONTENT//$'\n'/' '}"
        PAYLOAD_CONTENT="${PAYLOAD_CONTENT//$'\r'/' '}"
        echo "::set-output name=payload::$PAYLOAD_CONTENT"
        
    - id: extract_ci_tags
      name: Extract CI tags from commits
      run: |
        COMMIT_MESSAGES="${{ join(fromJSON(steps.load_event_payload.outputs.payload).commits.*.message, ';') }}"
        COMMIT_TAGS=$(echo "$COMMIT_MESSAGES" | grep -oP '\[.*?\]' | sed 's/\[\(.*\)\]\\n*/\1 /')
        echo "::set-output name=tags::$COMMIT_TAGS"
        
    - id: select_build_configs
      name: Select build configs
      run: |
        if [[ "${{ steps.extract_ci_tags.outputs.tags }}" == *"all_configs"* ]]; then
          echo "::set-output name=build_configs::[\"Debug\",\"Develop\",\"Profile\",\"Release\"]"
        else
          echo "::set-output name=build_configs::[\"Debug\",\"Develop\"]"
        fi
        
  build_configurations:
    name: Build selected configs
    needs: setup_workflow
    continue-on-error: true
    strategy:
      matrix:
        arch: [x64]
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    
    - name: Prepare workspace
      shell: pwsh
      run: |
        pip3 install setuptools
        pip3 install wheel
        pip3 install conan
        conan config install https://github.com/iceshard-engine/conan-config.git
        
    - name: Cache Conan packages
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-packages
      with:
        path: ~/.conan
        key: ${{ runner.os }}-build-${{ env.cache-name }}
        restore-keys: |
          ${{ runner.os }}-build-
          
    - name: 'Call: Build parallel'
      if: ${{ startsWith(matrix.os, 'windows-') }}
      uses: ./.github/actions/cw_build_parallel.yaml@831805845cbfcebea88b3ebdc7ca9cf7029b7d00
      with:
        configs: ${{ needs.setup_workflow.outputs.build_configs }}
        platform: 'windows'
        architecture: x64
        
    - name: Build targets
      if: ${{ startsWith(matrix.os, 'ubuntu-') && contains(steps.extract_ci_tags.outputs.tags, 'parallel') == false }}
      run: |
        BUILD_CONFIGS="${{ join(fromJSON(needs.setup_workflow.outputs.build_configs), ' ') }}"
        BUILD_TARGETS=$(echo "$BUILD_CONFIGS" | grep -oP '\S+' | sed 's/\(\S*\)/-t all-${{matrix.arch}}-\1/')
        
        ./ice.sh init
        ./ice.sh build $BUILD_TARGETS
        
    - name: Build targets
      if: ${{ startsWith(matrix.os, 'windows-') && contains(steps.extract_ci_tags.outputs.tags, 'parallel') == false }}
      shell: pwsh
      run: |
        $BuildTargets = "${{ join(fromJSON(needs.setup_workflow.outputs.build_configs), '","') }}" | ForEach-Object { "-t all-${{matrix.arch}}-$_" }
        $BuildTargetsOption = $BuildTargets -join " "
        cmd /C ".\ice.bat init"
        cmd /C ".\ice.bat build $BuildTargetsOption"
        
    - name: Execute Tests
      if: ${{ startsWith(matrix.os, 'windows-') && contains(steps.extract_ci_tags.outputs.tags, 'parallel') == false }}
      shell: pwsh
      run: |
        $BuildTargets = "${{ join(fromJSON(needs.setup_workflow.outputs.build_configs), '","') }}" | ForEach-Object { "-t test-all-${{matrix.arch}}-$_" }
        $BuildTargetsOption = $BuildTargets -join " "
        cmd /C ".\ice.bat build $BuildTargetsOption"
