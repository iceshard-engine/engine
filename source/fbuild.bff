#import SystemRoot

Settings
{
    .Environment =
    {
        "SystemRoot=$SystemRoot$"
        "TMP=$SystemRoot$\temp"
    }
}

; Include the generated compiler definitions
#include "scripts/compilers.bff"
#include "../build/conan.bff"

; Workspace properties
.WorkspaceRoot = '$_CURRENT_BFF_DIR_$/..'

.WorkspaceBuildDir = '$WorkspaceRoot$/build'
.WorkspaceCodeDir = '$_CURRENT_BFF_DIR_$/code'

.WorkspaceConanModules = { 'fmt', 'cppcoro' }

; Configuration names
.ConfigNameDebug = 'Debug'
.ConfigNameReleaseDebug = 'ReleaseDebug'
.ConfigNameRelease = 'Release'

; VS properties
.VSBuildCommand = '$WorkspaceRoot$/ice build -t'
.VSRebuildCommand = '$WorkspaceRoot$/ice build --clean -t'

; Windows platform
.platform_x64_windows =
[
    Using( .msvcCompilerOptions )
    Using( .msvcLinkerOptions )
    Using( .msvcLibrarianOptions )

    .CompilerOptions + ' /await'
        + ' /wd4127' // conditional expression is constant'
        + ' /permissive-'

    .Platform = 'x64'
]

; Add VisualStudio properties
.platform_x64_windows + .'vs$vsProductVersion$_Variables'

; Windows configurations
.config_Debug =
[
    .Config = 'Debug'
    .CompilerOptions = ' /D_DEBUG'
        + ' /INCREMENTAL'
        + ' /Od'
        + ' /Z7'
        + ' /MDd'

    .LinkerOptions = ' /DEBUG:FULL'

    .ConanConfig = 'Debug'
]

.config_ReleaseDebug =
[
    .Config = 'ReleaseDebug'
    .CompilerOptions = ' /D_RDEBUG'
        + ' /INCREMENTAL'
        + ' /O2'
        + ' /Z7'
        + ' /MD'

    .LinkerOptions = ' /DEBUG:FULL'

    .ConanConfig = 'Release'
]

.config_Release =
[
    .Config = 'Release'
    .CompilerOptions = ' /D_NDEBUG'
        + ' /O2'
        + ' /Z7'
        + ' /MD'

    .LinkerOptions = ' /DEBUG:FASTLINK'

    .ConanConfig = 'Release'
]


// Defined rendering system flags
//--------------------------------------------------------------------------
#if exists(VULKAN_SDK)
#import VULKAN_SDK
.vulkan_x64_windows =
[
    .CompilerOptions = ''
        + ' /I"$VULKAN_SDK$/Include"'
        + ' /DVK_USE_PLATFORM_WIN32_KHR'

    .LinkerOptions = ''
        + ' /LIBPATH:"$VULKAN_SDK$/Lib"'
        + ' "vulkan-1.lib"'
]
#else
.vulkan_x64_windows =
[
    .CompilerOptions = ''
    .LinkerOptions = ''
]
#endif


// Defined Configurations
//--------------------------------------------------------------------------
.x64_Debug = .platform_x64_windows
    + .config_Debug
.x64_ReleaseDebug = .platform_x64_windows
    + .config_ReleaseDebug
.x64_Release = .platform_x64_windows
    + .config_Release

// Configuration list
.Configurations = {
    .x64_Debug,
    .x64_ReleaseDebug,
    .x64_Release,
}



// Predefine specific values used later when generating 'All' aliases
//--------------------------------------------------------------------------
.Projects = { }
.SolutionFolders = { }
.SolutionProjects = { }


// Include project target scripts
//--------------------------------------------------------------------------
{
    .VisualStudioProjects = { }

    // Core projects
    //--------------------------------------------------------------------------
    #include "code/core/core.bff"
    #include "code/memsys/memsys.bff"
    #include "code/collections/collections.bff"
    #include "code/messages/messages.bff"

    .SolutionFolder =
    [
        .Path      = '1. core'
        .Projects = { }
        ForEach( .Project in .VisualStudioProjects )
        {
            ^Projects + '$Project$-vcxproj'
        }

        ^SolutionProjects + .Projects
    ]
    ^SolutionFolders + .SolutionFolder
    .VisualStudioProjects = { }


    // Systems projects
    //--------------------------------------------------------------------------
    #include "code/resource_system/resource_system.bff"
    #include "code/asset_system/asset_system.bff"
    #include "code/render_system/render_system.bff"
    #include "code/input_system/input_system.bff"

    .SolutionFolder =
    [
        .Path      = '2. systems'
        .Projects = { }
        ForEach( .Project in .VisualStudioProjects )
        {
            ^Projects + '$Project$-vcxproj'
        }

        ^SolutionProjects + .Projects
    ]
    ^SolutionFolders + .SolutionFolder
    .VisualStudioProjects = { }


    // Driver projects
    //--------------------------------------------------------------------------
    #include "code/sdl2_driver/sdl2_driver.bff"
    #include "code/vulkan_driver/vulkan_driver.bff"

    .SolutionFolder =
    [
        .Path      = '3. drivers'
        .Projects = { }
        ForEach( .Project in .VisualStudioProjects )
        {
            ^Projects + '$Project$-vcxproj'
        }

        ^SolutionProjects + .Projects
    ]
    ^SolutionFolders + .SolutionFolder
    .VisualStudioProjects = { }


    // Game layer projects
    //--------------------------------------------------------------------------
    #include "code/engine/engine.bff"
    #include "code/iceshard/iceshard.bff"
    #include "code/application/application.bff"

    .SolutionFolder =
    [
        .Path      = '4. game'
        .Projects = { }
        ForEach( .Project in .VisualStudioProjects )
        {
            ^Projects + '$Project$-vcxproj'
        }

        ^SolutionProjects + .Projects
    ]
    ^SolutionFolders + .SolutionFolder
    .VisualStudioProjects = { }


    // Applications
    //--------------------------------------------------------------------------
    #include "code/test/test.bff"

    ForEach( .Project in .VisualStudioProjects )
    {
        ^SolutionProjects + '$Project$-vcxproj'
    }
}

// Generate 'All' targets
//--------------------------------------------------------------------------
ForEach( .Configuration in .Configurations )
{
    Using( .Configuration )

    .AliasTargets = { }
    ForEach( .Project in .Projects )
    {
        ^AliasTargets + '$Project$-$Platform$-$Config$'
    }

    Alias( 'all-$Platform$-$Config$' )
    {
        .Targets = .AliasTargets
    }
}



// Create solution targets
//--------------------------------------------------------------------------
VSSolution( 'solution' )
{
    .SolutionOutput = '../IceShard.sln'
    .SolutionConfigs = .Configurations

    .SolutionFolders = .SolutionFolders
    .SolutionProjects = .SolutionProjects
    .SolutionBuildProject = { 'test-vcxproj' }
}
