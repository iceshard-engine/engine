

.Properties =
[
    // Dependency properties
    .Uses = { }
    .Modules = { }
    .DependsOn = []

    // Compiler properties
    .Defines = { }
    .IncludeDirs = { }

    // Linker properties
    .Libs = { }
    .LibDirs = { }

]

// General structure of public properties
.ProjectsResolved = { }
.ProjectPropertiesStruct = [ ]

// Build final project structures for each project in the list
ForEach( .Project in .Projects )
{
    .Public = []
    .Private = []
    .Requires = { }

    // Miscelaneous
    .UnityBuilds = true
    .CopyModules = false

    Using( .Project )

    .ResolvedProject =
    [
        .ProjectName = .Name
        .ProjectKind = .Kind
        .ProjectBaseDir = .BaseDir
        .ProjectRequires = .Requires

        // Public properties
        .ProjectProperties_Public =
        [
            Using( .Properties )
            Using( .Public )

            // Gather public uses
            {
                Using( .ProjectPropertiesStruct )

                .UsesUnique = .Uses
                ForEach( .Dependency in .Uses )
                {
                    Using( .'ProjectProperties_$Dependency$' )
                    ForEach( .Value in .Uses )
                    {
                        If ( .Value not in .UsesUnique )
                        {
                            ^UsesUnique + .Value
                        }
                    }
                }
                ^Uses = .UsesUnique
            }

            .IncludeDirs + {
                '$ProjectBaseDir$/public'
            }
        ]

        // Private properties
        .ProjectProperties_Private =
        [
            Using( .Properties )
            Using( .Private )

            // Gather private uses
            {
                Using( .ProjectPropertiesStruct )

                .UsesUnique = .Uses
                ForEach( .Dependency in .Uses )
                {
                    Using( .'ProjectProperties_$Dependency$' )
                    ForEach( .Value in .Uses )
                    {
                        If ( .Value not in .UsesUnique )
                        {
                            ^UsesUnique + .Value
                        }
                    }
                }
                ^Uses = .UsesUnique
            }

            .UnityBuilds = ^UnityBuilds
            .CopyModules = ^CopyModules
        ]

        // Final properties
        .ProjectProperties_Final = []
        {
            Using( .ProjectPropertiesStruct )

            .ProjectProperties_Combined = [ ]
                + .ProjectProperties_Private
                + .ProjectProperties_Public

            // Gether dependency properties
            .GatheredDependencies = { }
            .GatheredProperties = {
                'Modules'
                'Defines'
                'IncludeDirs'
            }

            ^ProjectProperties_Final =
            [
                Using( .ProjectProperties_Combined )

                .LibraryTargets = { }

                ForEach( .Dependency in .Uses )
                {
                    If ( .Dependency not in .GatheredDependencies )
                    {
                        ^GatheredDependencies + .Dependency
                        Print( "$ProjectName$: Gathering $Dependency$..." )

                        ForEach( .Property in .GatheredProperties )
                        {
                            Using( .'ProjectProperties_$Dependency$' )
                            ^'$Property$' + .'$Property$'
                        }
                    }

                    ^LibraryTargets + .Dependency
                }

                .Uses = {}
            ]
        }

    ]

    ^ProjectsResolved + .ResolvedProject

    // Save the public properties for later
    {
        Using( .ResolvedProject )
        .ProjectPropertiesEntry =
        [
            .'ProjectProperties_$ProjectName$' = .ProjectProperties_Public
        ]
        ^ProjectPropertiesStruct + .ProjectPropertiesEntry
    }
}

// If ( .Name == .Name_Empty )
// {
//     Error( 'Project name cannot be empty!' )
// }

// If ( .Kind not in .Kind_AllowedList )
// {
//     Error( 'Invalid kind "$Kind$", expected one of: $Kind_StaticLib$, $Kind_SharedLib$, $Kind_ConsoleApp$, $Kind_WindowedApp$!' )
// }

// // Define this project
// //--------------------------------------------------------------------------
// .ProjectName = .Name
// .ProjectKind = .Kind
// .ProjectPublic = .Public
// .ProjectPrivate = .Private

// // Define this project properties
// //--------------------------------------------------------------------------
// .ProjectProperties_Final = []

// .ProjectProperties_Private =
// [
//     .Imports = {}
//     .Modules = {}
//     .Defines = {}
//     .CompilerFlags = {}
//     .Libs = {}
//     .LibDirs = {}
//     Using( .ProjectPrivate )
//     .CopyModules = .CopyModules
//     .UnityBuilds = .UnityBuilds
//     .Dependencies = .DependsOn
// ]

// .ProjectProperties_Public =
// [
//     .Imports = {}
//     .Modules = {}
//     .Defines = {}
//     .CompilerFlags = {}
//     .Libs = {}
//     .LibDirs = {}
//     Using( .ProjectPublic )
//     .IncludeDirs = { '$ProjectBaseDir$/public' }
// ]

// {
//     Using( .ProjectUsings )

//     // Gather public imports
//     //--------------------------------------------------------------------------
//     ^ProjectProperties_Public =
//     [
//         Using( .ProjectProperties_Public )

//         {
//             .ImportsUnique = ^Imports
//             ForEach( .Dependency in .Imports )
//             {
//                 Using( .'$Dependency$_Properties_Public' )
//                 ForEach( .Value in .Imports )
//                 {
//                     If ( .Value not in .ImportsUnique )
//                     {
//                         ^ImportsUnique + .Value
//                     }
//                 }
//             }
//             ^Imports = .ImportsUnique
//         }
//     ]

//     // Gather private imports
//     //--------------------------------------------------------------------------
//     ^ProjectProperties_Private =
//     [
//         Using( .ProjectProperties_Private )

//         {
//             .ImportsUnique = ^Imports
//             ForEach( .Dependency in .Imports )
//             {
//                 Using( .'$Dependency$_Properties_Public' )
//                 ForEach( .Value in .Imports )
//                 {
//                     If ( .Value not in .ImportsUnique )
//                     {
//                         ^ImportsUnique + .Value
//                     }
//                 }
//             }
//             ^Imports = .ImportsUnique
//         }
//     ]
// }

// {
//     ^ProjectProperties_Final = []
//         + .ProjectProperties_Private
//         + .ProjectProperties_Public

//     // Append all proprties from imported projects
//     //--------------------------------------------------------------------------
//     .Variables = {
//         'Modules'
//         'Defines'
//         'IncludeDirs'
//     }

//     Using( .ProjectUsings )
//     Using( .ProjectProperties_Final )
//     ForEach( .Dependency in .Imports )
//     {
//         ^ProjectProperties_Final + .'$Dependency$_Properties_Public'
//     }


//     // Build the final property structure
//     //--------------------------------------------------------------------------
//     ^ProjectProperties_Final =
//     [
//         Using( .ProjectProperties_Final )
//         .CopyModules = .CopyModules
//         .Imports = { }
//     ]

//     // ^ProjectProperties_Final =
//     // [
//     //     Using( .ProjectProperties_Final )
//     //     ForEach( .Var in .Variables )
//     //     {
//     //         .'$Var$Unique' = ^'$Var$'
//     //         ForEach( .Dependency in .Imports )
//     //         {
//     //             Using( .'$Dependency$_Properties_Public' )
//     //             If ( .'$Var$' not in .'$Var$Unique' )
//     //             {
//     //                 ^'$Var$Unique' + .'$Var$'
//     //             }
//     //         }
//     //         ^'$Var$' = .'$Var$Unique'
//     //     }
//     // ]
// }

// // Update the 'ProjectUsings' variable
// //--------------------------------------------------------------------------
// {
//     .ProjectUsing =
//     [
//         .'$ProjectName$_Properties_Public' =
//         [
//             Using( .ProjectProperties_Public )
//             .LibraryTargets = { '$ProjectName$' }
//         ]
//     ]
//     ^ProjectUsings + .ProjectUsing
// }


// // // Update the 'ProjectUsings' variable
// // //--------------------------------------------------------------------------
// // {
// //     .ProjectUsing =
// //     [
// //         .ProjectProperties_Public_Unique = []
// //         {
// //             .ImportsUnique = {}
// //             .ModulesUnique = {}
// //             .IncludeDirsUnique = {}
// //             .Variables = { 'Imports', 'Modules', 'IncludeDirs' }

// //             Using( .ProjectProperties_Public )
// //             ForEach( .Var in .Variables )
// //             {
// //                 ForEach( .Value in .'$Var$' )
// //                 {
// //                     If ( .Value not in ^'$Var$Unique')
// //                     {
// //                         ^'$Var$Unique' + .Value
// //                     }
// //                 }
// //             }

// //             ^ProjectProperties_Public_Unique =
// //             [
// //                 .Imports = .ImportsUnique
// //                 .Modules = .ModulesUnique
// //                 .IncludeDirs = .IncludeDirsUnique
// //             ]
// //         }

// //         .'$ProjectName$_Properties_Public' = .ProjectProperties_Public_Unique
// //     ]
// //     ^ProjectUsings + .ProjectUsing
// // }
