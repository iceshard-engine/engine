#once

.KindOutDir_StaticLib = 'lib'
.KindOutDir_SharedLib = 'bin'
.KindOutDir_ConsoleApp = 'bin'
.KindOutDir_WindowedApp = 'bin'

.ConanVariables_StaticLib = { 'IncludeDirs', 'Defines' }
.ConanVariables_SharedLib = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }
.ConanVariables_ConsoleApp = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }
.ConanVariables_WindowedApp = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }

ForEach( .TargetConfig in .TargetConfigList )
{
    Using( .TargetConfig )

    Using( .Platform )
    Using( .PlatformOptions )
    Using( .PlatformExtensions )

    .ConfigTargets = { }

    ForEach( .Project in .ProjectsResolved )
    {
        Using( .Project )
        Using( .ProjectProperties_Final )

        Print( "Target: $ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$" )

        .OutDirName = .'KindOutDir_$ProjectKind$'
        .TargetExtension = .'OutputExtension_$ProjectKind$'

        .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
        .TargetImpLibDirectory = '$WorkspaceBuildDir$/lib/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
        .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
        .TargetOutputName = "$ProjectName$$TargetExtension$"
        .TargetList = { }

        // Print( "IntDir: $TargetIntermediateDirectory$" )
        // Print( "LibDir: $TargetImpLibDirectory$" )
        // Print( "Output: $TargetOutputDirectory$/$TargetName$" )

        // Build dependency lists
        //--------------------------------------------------------------------------
        .TargetBuildDependencies = {}
        .TargetLinkDependencies = {}
        .TargetRuntimeDependencies = {}

        {
            .Build = {}
            .Link = {}
            .Runtime = {}

            .Dependencies = [ ] + .Dependencies
            Using( .Dependencies )

            .Vars = { 'Build', 'Link', 'Runtime' }
            ForEach( .Var in .Vars )
            {
                ForEach( .Dependency in .'$Var$' )
                {
                    ^'Target$Var$Dependencies' + '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                }
            }
        }

        Using( .Properties )

        // Compiler flags
        //--------------------------------------------------------------------------
        {
            Using( .Toolchain )
            Using( .SdkProperties )

            .IncludeDirs
                + .SdkIncludeDirs
                + .ToolchainIncludeDirs
            .LibDirs
                + .SdkLibDirs
                + .ToolchainLibDirs
            .Libs
                + .SdkLibs
                + .ToolchainLibs

            .Variables = {
                'IncludeDirs'
                'Defines'
                // 'CompilerFlags'
                'Libs'
                'LibDirs'
            }

            ForEach( .Var in .Variables )
            {
                Using( .'ToolchainFlag_$Var$' )
                ForEach( .Value in .'$Var$' )
                {
                    ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                }
            }
        }

        // Conan Modules
        //--------------------------------------------------------------------------
        ForEach( .ConanModule in .Modules )
        {
            Using( .'ConanModule_$ConanModule$_$ConanConfigName$' )

            ForEach( .Var in .'ConanVariables_$ProjectKind$' )
            {
                Using( .'ToolchainFlag_$Var$' )
                ForEach( .Value in .'$Var$' )
                {
                    ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                }
            }

            If ( .CopyModules )
            {


                .CopyDirs = false
                .CopyDirsList = { }
                ForEach( .BinDir in .BinDirs )
                {
                    ^CopyDirs = true
                    ^CopyDirsList + "$BinDir$/"
                }

                If ( .CopyDirs )
                {
                    CopyDir( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir' )
                    {
                        .SourcePaths = .CopyDirsList
                        .SourcePathsPattern = '*.dll'
                        .Dest = .TargetOutputDirectory
                    }
                    ^TargetRuntimeDependencies + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir'
                }
            }
        }

        {
            Using( .Toolchain )

            {
                .Compiler = .ToolchainCompiler
                .CompilerOutputPath = .TargetIntermediateDirectory
                .CompilerInputUnity = { }
                .CompilerInputPath = { '$ProjectBaseDir$/private' }
                .CompilerInputPattern = '*.cxx'

                // Unity files
                //--------------------------------------------------------------------------
                If ( .UnityBuilds )
                {
                    Unity( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity' )
                    {
                        .UnityInputPath = '$ProjectBaseDir$/private'
                        .UnityInputPattern = { '*.cxx' }
                        .UnityOutputPath = .TargetIntermediateDirectory
                        .UnityOutputPattern = 'unity_$ProjectName$_*.cxx'
                    }

                    // Reset compiler input paths
                    ^CompilerInputUnity = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity'
                    ^CompilerInputPath = { }
                }

                // Object list
                //--------------------------------------------------------------------------
                ObjectList( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' )
                {
                }
            }

            // Static Library target
            //--------------------------------------------------------------------------
            If ( .ProjectKind == .Kind_StaticLib )
            {
                .Compiler = .ToolchainCompiler
                .CompilerOutputPath = .TargetIntermediateDirectory

                .Librarian = .ToolchainLibrarian
                .LibrarianAdditionalInputs = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects'
                .LibrarianOutput = '$TargetOutputDirectory$/$TargetOutputName$'

                Library( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                {
                }

                ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
            }

            // Shared Library target
            //--------------------------------------------------------------------------
            If ( .ProjectKind == .Kind_SharedLib )
            {
                .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                ForEach( .Library in .LibraryTargets )
                {
                    ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                .Linker = .ToolchainLinker
                .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                DLL( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                {
                }

                ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
            }

            // Executable targets
            //--------------------------------------------------------------------------
            If ( .ProjectKind in .Kind_Applications )
            {
                .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                ForEach( .Library in .LibraryTargets )
                {
                    ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                .Linker = .ToolchainLinker
                .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                Executable( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                {
                }

                ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
            }
        }

        Alias( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$' )
        {
            .Targets = .TargetList
                + .TargetRuntimeDependencies
        }

        ^ConfigTargets + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
    }

    ForEach( .AliasInfo in .AliasInfos )
    {
        Using( .AliasInfo )

        If ( .AliasTags in .ConfigTags )
        {
            Alias( "$AliasName$-$ConfigName$" )
            {
                .Targets = .ConfigTargets
            }
        }
    }
}

// .SolutionProjects = {}

// ForEach( .ProjectDefinition in .ProjectDefinitionList )
// {
//     // Apply all properties
//     Using( .ProjectDefinition )
//     Using( .ProjectProperties_Final )
//     Using( .ProjectProperties_Targets )

//     .ProjectName = .Name
//     .ProjectKind = .Kind
//     .ProjectConanModules = .Modules
//     .ProjectVCXConfigs = { }

//     Using( .'Project_$Kind$' )

//     // Go over all configurations
//     //--------------------------------------------------------------------------
//     ForEach( .Configuration in .Configurations )
//     {
//         Using( .Configuration )
//         Using( .CompilerProperties )
//         Using( .MSVC )

//         .OutputExtension = .'TargetExt_$ProjectKind$'
//         .ConfigurationTags = { 'Windows', .Platform, .Config }

//         // Configuration properties
//         //--------------------------------------------------------------------------
//         .ConfigurationIntermediateDirectory = '$WorkspaceBuildDir$/$Kind_ObjDir$/$Platform$-$Config$/$ProjectName$'
//         .ConfigurationTargetDirectory = '$WorkspaceBuildDir$/$Kind_TargetDir$/$Platform$-$Config$/$ProjectName$'
//         .ConfigurationImpLibDirectory = '$WorkspaceBuildDir$/$Kind_ImpLibDir$/$Platform$-$Config$/$ProjectName$'
//         .ProjectConfigurationTargets = { }

//         .ConfigurationBuildDependencies = {}
//         .ConfigurationLinkDependencies = {}
//         .ConfigurationRuntimeDependencies = {}

//         // Build dependency lists
//         //--------------------------------------------------------------------------
//         {
//             .Build = {}
//             .Link = {}
//             .Runtime = {}
//             Using( .Dependencies )

//             .Vars = { 'Build', 'Link', 'Runtime' }
//             ForEach( .Var in .Vars )
//             {
//                 ForEach( .Dependency in .'$Var$' )
//                 {
//                     ^'Configuration$Var$Dependencies' + '$Dependency$-$Platform$-$Config$'
//                 }
//             }
//         }

//         // Compiler flags
//         //--------------------------------------------------------------------------
//         {
//             .Variables = {
//                 'IncludeDirs'
//                 'Defines'
//                 'CompilerFlags'
//                 'Libs'
//                 'LibDirs'
//             }

//             ForEach( .Var in .Variables )
//             {
//                 Using( .'Flags_$Var$' )
//                 ForEach( .Value in .'$Var$' )
//                 {
//                     ^'$FlagTargetVar$' + ' $FlagPrefix$$Value$$FlagSuffix$'
//                 }
//             }
//         }

//         // Conan Modules
//         //--------------------------------------------------------------------------
//         ForEach( .ConanModule in .ProjectConanModules )
//         {
//             Using( .'ConanModule_$ConanModule$_$ConanConfig$' )

//             ForEach( .OptionName in .Conan_OptionNames )
//             {
//                 Using( .'Flags_$OptionName$' )
//                 ForEach( .Value in .'$OptionName$' )
//                 {
//                     ^'$FlagTargetVar$' + ' $FlagPrefix$$Value$$FlagSuffix$'
//                 }
//             }

//             If ( .CopyModules )
//             {
//                 .CopyDirs = false
//                 .CopyDirsList = { }
//                 ForEach( .BinDir in .BinDirs )
//                 {
//                     ^CopyDirs = true
//                     ^CopyDirsList + "$BinDir$/"
//                 }

//                 If ( .CopyDirs )
//                 {
//                     CopyDir( '$ProjectName$-$Platform$-$Config$-$ConanModule$-copydir' )
//                     {
//                         .SourcePaths = .CopyDirsList
//                         .SourcePathsPattern = '*.dll'
//                         .Dest = .ConfigurationTargetDirectory
//                     }
//                     ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-$ConanModule$-copydir'
//                 }
//             }
//         }

//         {
//             .CompilerOutputPath = .ConfigurationIntermediateDirectory
//             .CompilerInputUnity = { }
//             .CompilerInputPath = { '$ProjectBaseDir$/private' }
//             .CompilerInputPattern = '*.cxx'

//             // Unity files
//             //--------------------------------------------------------------------------
//             If ( .UnityBuilds )
//             {
//                 Unity( '$ProjectName$-$Platform$-$Config$-unity' )
//                 {
//                     .UnityInputPath = '$ProjectBaseDir$/private'
//                     .UnityInputPattern = { '*.cxx' }
//                     .UnityOutputPath = .ConfigurationIntermediateDirectory
//                 }

//                 // Reset compiler input paths
//                 ^CompilerInputUnity = '$ProjectName$-$Platform$-$Config$-unity'
//                 ^CompilerInputPath = { }
//             }

//             // Object list
//             //--------------------------------------------------------------------------
//             ObjectList( '$ProjectName$-$Platform$-$Config$-objects' )
//             {
//             }
//         }

//         // Library target
//         //--------------------------------------------------------------------------
//         If ( .ProjectKind == .Kind_StaticLib )
//         {
//             Library( '$ProjectName$-$Platform$-$Config$-link' )
//             {
//                 .CompilerOutputPath = .ConfigurationIntermediateDirectory

//                 .LibrarianAdditionalInputs = '$ProjectName$-$Platform$-$Config$-objects'
//                 .LibrarianOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
//             }
//             ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
//         }

//         // DLL target
//         //--------------------------------------------------------------------------
//         If ( .ProjectKind == .Kind_SharedLib )
//         {
//             DLL( '$ProjectName$-$Platform$-$Config$-link' )
//             {
//                 .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
//                 ForEach( .Library in .LibraryTargets )
//                 {
//                     ^Libraries + '$Library$-$Platform$-$Config$-link'
//                 }

//                 .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
//                 .LinkerOptions + ' /DLL'
//             }
//             ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
//         }

//         // Executable targets
//         //--------------------------------------------------------------------------
//         If ( .ProjectKind == .Kind_ConsoleApp )
//         {
//             Executable( '$ProjectName$-$Platform$-$Config$-link' )
//             {
//                 .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
//                 ForEach( .Library in .LibraryTargets )
//                 {
//                     ^Libraries + '$Library$-$Platform$-$Config$-link'
//                 }

//                 .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
//                 .LinkerOptions + ' /SUBSYSTEM:CONSOLE'
//             }
//             ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
//         }
//         If ( .ProjectKind == .Kind_WindowedApp )
//         {
//             Executable( '$ProjectName$-$Platform$-$Config$-link' )
//             {
//                 .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
//                 ForEach( .Library in .LibraryTargets )
//                 {
//                     ^Libraries + '$Library$-$Platform$-$Config$-link'
//                 }

//                 .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
//                 .LinkerOptions + ' /SUBSYSTEM:WINDOWS'
//             }
//             ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
//         }

//         // VCXProjectConfiguration
//         If ( .System_Windows in .ConfigurationTags )
//         {
//             .ProjectVCXConfig =
//             [
//                 .PlatformToolset = 'v141'

//                 .Platform = .Platform
//                 .Config = .Config
//                 .Target = '$ProjectName$-$Platform$-$Config$-objects'

//                 .IntermediateDirectory = .ConfigurationIntermediateDirectory
//                 .OutputDirectory = .ConfigurationTargetDirectory
//                 .Output = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'

//                 .ProjectBuildCommand = '$VSBuildCommand$ $ProjectName$-$Platform$-$Config$'
//                 .ProjectRebuildCommand = '$VSRebuildCommand$ $ProjectName$-$Platform$-$Config$'

//                 .LocalDebuggerWorkingDirectory = '$WorkspaceBuildDir$'
//             ]
//             ^ProjectVCXConfigs + .ProjectVCXConfig
//         }

//         // Target alias
//         //--------------------------------------------------------------------------
//         Alias( '$ProjectName$-$Platform$-$Config$' )
//         {
//             .Targets = .ProjectConfigurationTargets
//                 + .ConfigurationRuntimeDependencies
//         }

//         // Target alias lists
//         //--------------------------------------------------------------------------
//         .TargetsList =
//         [
//             .'Targets_$Platform$_$Config$' = '$ProjectName$-$Platform$-$Config$'
//         ]
//         ^TargetsLists + .TargetsList
//     }

//     // Create vcxproject target
//     //--------------------------------------------------------------------------
//     VCXProject( '$ProjectName$-vcxproj' )
//     {
//         .ProjectOutput = '$WorkspaceBuildDir$/projects/$ProjectName$.vcxproj'
//         .ProjectConfigs = .ProjectVCXConfigs
//         .ProjectInputPaths = .ProjectBaseDir
//         .ProjectBasePath = .ProjectBaseDir
//     }
//     ^SolutionProjects + '$ProjectName$-vcxproj'
// }


// // Create solution target
// //--------------------------------------------------------------------------
// {
//     .SolutionConfigs = {}

//     ForEach( .Configuration in .Configurations )
//     {
//         Using( .Configuration )

//         .SolutionConfig =
//         [
//             .Platform = .Platform
//             .Config = .Config
//         ]
//         ^SolutionConfigs + .SolutionConfig
//     }

//     // Create solution targets
//     //--------------------------------------------------------------------------
//     VSSolution( 'solution' )
//     {
//         .SolutionOutput = '../IceShard.sln'

//         .SolutionFolders = .SolutionFolders
//         .SolutionProjects = .SolutionProjects
//         .SolutionBuildProject = { 'test-vcxproj' }
//     }
// }


// // All alliases
// //--------------------------------------------------------------------------
// {
//     .AllTargets = { }
//     Using( .TargetsLists )
//     ForEach( .Configuration in .Configurations )
//     {
//         Using( .Configuration )
//         Alias( 'all-$Platform$-$Config$' )
//         {
//             .Targets = .'Targets_$Platform$_$Config$'
//             ^AllTargets + .Targets
//         }
//     }
//     Alias( 'all' )
//     {
//         .Targets = .AllTargets
//     }
// }
