#once

.KindOutDir_StaticLib = 'lib'
.KindOutDir_SharedLib = 'bin'
.KindOutDir_ConsoleApp = 'bin'
.KindOutDir_WindowedApp = 'bin'

.ConanVariables_StaticLib = { 'IncludeDirs', 'Defines' }
.ConanVariables_SharedLib = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }
.ConanVariables_ConsoleApp = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }
.ConanVariables_WindowedApp = { 'IncludeDirs', 'Defines', 'Libs', 'LibDirs' }

.AllConfigTargets = { }

ForEach( .TargetConfig in .TargetConfigList )
{
    Using( .TargetConfig )

    Using( .PlatformInfo )
    Using( .PlatformOptions )
    Using( .PlatformExtensions )

    .ConfigTargets = { }

    ForEach( .Project in .ProjectsResolved )
    {
        Using( .Project )
        Using( .ProjectProperties_Final )

        .AvailableTags = { }
            + .AllConfigTargets
            + .ConfigTags
            + .SDKNames

        .ProjectRequirementsSatisfied = true

        .ProjectConfigTarget = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'

        {
            .ProjectConfigRequires = .ProjectRequires
            ForEach( .Dependency in .Uses )
            {
                ^ProjectConfigRequires + '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
            }

            ForEach( .Requirement in .ProjectConfigRequires )
            {
                If ( .Requirement not in .AvailableTags )
                {
                    Print( "INFO: $ProjectName$ is missing $Requirement$ for ($ConfigPlatform$-$ConfigName$-$ConfigToolchain$)" )
                    ^ProjectRequirementsSatisfied = false
                }
            }
        }

        If ( .ProjectRequirementsSatisfied )
        {

            // Print( "Target: $ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$" )

            .OutDirName = .'KindOutDir_$ProjectKind$'
            .TargetExtension = .'OutputExtension_$ProjectKind$'

            .TargetIntermediateDirectory = '$WorkspaceBuildDir$/obj/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetImpLibDirectory = '$WorkspaceBuildDir$/lib/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetOutputDirectory = '$WorkspaceBuildDir$/$OutDirName$/$ConfigPlatform$-$ConfigName$-$ConfigToolchain$/$ProjectName$'
            .TargetOutputName = "$ProjectName$$TargetExtension$"
            .TargetList = { }

            // Print( "IntDir: $TargetIntermediateDirectory$" )
            // Print( "LibDir: $TargetImpLibDirectory$" )
            // Print( "Output: $TargetOutputDirectory$/$TargetName$" )

            // Build dependency lists
            //--------------------------------------------------------------------------
            .TargetBuildDependencies = {}
            .TargetLinkDependencies = {}
            .TargetRuntimeDependencies = {}

            {
                .Build = {}
                .Link = {}
                .Runtime = {}

                Using( .Dependencies )

                .Vars = { 'Build', 'Link', 'Runtime' }
                ForEach( .Var in .Vars )
                {
                    ForEach( .Dependency in .'$Var$' )
                    {
                        .DependencyTargetName = '$Dependency$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$'
                        If ( .DependencyTargetName in .AllConfigTargets )
                        {
                            ^'Target$Var$Dependencies' + .DependencyTargetName
                        }
                    }
                }
            }

            Using( .Properties )

            // Project specific SDK
            ForEach( .SDKName in .SDKNames, .SDK in .SDKList )
            {
                If ( .SDKName not in .ConfigTags )
                {
                    If ( .SDKName in .ProjectRequires )
                    {
                        ^SDKProperties + .SDK
                    }
                }
            }

            // Compiler flags
            //--------------------------------------------------------------------------
            {
                Using( .Toolchain )
                Using( .SDKProperties )

                .IncludeDirs
                    + .SdkIncludeDirs
                    + .ToolchainIncludeDirs
                .LibDirs
                    + .SdkLibDirs
                    + .ToolchainLibDirs
                .Libs
                    + .SdkLibs
                    + .ToolchainLibs

                .Variables = {
                    'IncludeDirs'
                    'Defines'
                    // 'CompilerFlags'
                    'Libs'
                    'LibDirs'
                }

                ForEach( .Var in .Variables )
                {
                    Using( .'ToolchainFlag_$Var$' )
                    ForEach( .Value in .'$Var$' )
                    {
                        ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                    }
                }
            }

            // Conan Modules
            //--------------------------------------------------------------------------
            ForEach( .ConanModule in .Modules )
            {
                Using( .'ConanModule_$ConanModule$_$ConanConfigName$' )

                ForEach( .Var in .'ConanVariables_$ProjectKind$' )
                {
                    Using( .'ToolchainFlag_$Var$' )
                    ForEach( .Value in .'$Var$' )
                    {
                        ^'$FlagVariable$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                    }
                }

                If ( .CopyModules )
                {


                    .CopyDirs = false
                    .CopyDirsList = { }
                    ForEach( .BinDir in .BinDirs )
                    {
                        ^CopyDirs = true
                        ^CopyDirsList + "$BinDir$/"
                    }

                    If ( .CopyDirs )
                    {
                        CopyDir( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir' )
                        {
                            .SourcePaths = .CopyDirsList
                            .SourcePathsPattern = '*.dll'
                            .Dest = .TargetOutputDirectory
                        }
                        ^TargetRuntimeDependencies + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-$ConanModule$-copydir'
                    }
                }
            }

            {
                Using( .Toolchain )

                {
                    .Compiler = .ToolchainCompiler
                    .CompilerOutputPath = .TargetIntermediateDirectory
                    .CompilerInputUnity = { }
                    .CompilerInputPath = { '$ProjectBaseDir$/private' }
                    .CompilerInputPattern = '*.cxx'

                    // Unity files
                    //--------------------------------------------------------------------------
                    If ( .UnityBuilds )
                    {
                        Unity( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity' )
                        {
                            .UnityInputPath = '$ProjectBaseDir$/private'
                            .UnityInputPattern = { '*.cxx' }
                            .UnityOutputPath = .TargetIntermediateDirectory
                            .UnityOutputPattern = 'unity_$ProjectName$_*.cxx'
                        }

                        // Reset compiler input paths
                        ^CompilerInputUnity = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-unity'
                        ^CompilerInputPath = { }
                    }

                    // Object list
                    //--------------------------------------------------------------------------
                    ObjectList( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' )
                    {
                    }
                }

                // Static Library target
                //--------------------------------------------------------------------------
                If ( .ProjectKind == .Kind_StaticLib )
                {
                    .Compiler = .ToolchainCompiler
                    .CompilerOutputPath = .TargetIntermediateDirectory

                    .Librarian = .ToolchainLibrarian
                    .LibrarianAdditionalInputs = '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects'
                    .LibrarianOutput = '$TargetOutputDirectory$/$TargetOutputName$'

                    Library( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                // Shared Library target
                //--------------------------------------------------------------------------
                If ( .ProjectKind == .Kind_SharedLib )
                {
                    .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                    ForEach( .Library in .LibraryTargets )
                    {
                        ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                    }

                    .Linker = .ToolchainLinker
                    .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                    .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                    DLL( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }

                // Executable targets
                //--------------------------------------------------------------------------
                If ( .ProjectKind in .Kind_Applications )
                {
                    .Libraries = { '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-objects' }
                    ForEach( .Library in .LibraryTargets )
                    {
                        ^Libraries + '$Library$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                    }

                    .Linker = .ToolchainLinker
                    .LinkerOutput = '$TargetOutputDirectory$/$TargetOutputName$'
                    .LinkerOptions + .'LinkerOptions_$ProjectKind$'

                    Executable( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link' )
                    {
                    }

                    ^TargetList + '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$-link'
                }
            }

            Alias( '$ProjectName$-$ConfigPlatform$-$ConfigName$-$ConfigToolchain$' )
            {
                .Targets = .TargetList
                    + .TargetRuntimeDependencies
            }

            ^ConfigTargets + .ProjectConfigTarget
            ^AllConfigTargets + .ProjectConfigTarget
        }

    }

    ForEach( .AliasInfo in .AliasInfos )
    {
        Using( .AliasInfo )

        If ( .AliasTags in .ConfigTags )
        {
            Alias( "$AliasName$-$ConfigName$" )
            {
                .Targets = .ConfigTargets
            }
        }
    }
}
