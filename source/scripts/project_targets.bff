#once

.System_Linux = 'Linux'
.System_Windows = 'Windows'

.TargetsLists = [ ]
ForEach( .Configuration in .Configurations )
{
    Using( .Configuration )
    .TargetList =
    [
        .'Targets_$Platform$_$Config$' = { }
    ]
    ^TargetsLists + .TargetList
}

.SolutionProjects = {}

ForEach( .ProjectDefinition in .ProjectDefinitionList )
{
    // Apply all properties
    Using( .ProjectDefinition )
    Using( .ProjectProperties_Final )
    Using( .ProjectProperties_Targets )

    .ProjectName = .Name
    .ProjectKind = .Kind
    .ProjectConanModules = .Modules
    .ProjectVCXConfigs = { }

    Using( .'Project_$Kind$' )

    // Go over all configurations
    //--------------------------------------------------------------------------
    ForEach( .Configuration in .Configurations )
    {
        Using( .Configuration )
        Using( .CompilerProperties )
        Using( .MSVC )

        .OutputExtension = .'TargetExt_$ProjectKind$'
        .ConfigurationTags = { 'Windows', .Platform, .Config }

        // Configuration properties
        //--------------------------------------------------------------------------
        .ConfigurationIntermediateDirectory = '$WorkspaceBuildDir$/$Kind_ObjDir$/$Platform$-$Config$/$ProjectName$'
        .ConfigurationTargetDirectory = '$WorkspaceBuildDir$/$Kind_TargetDir$/$Platform$-$Config$/$ProjectName$'
        .ConfigurationImpLibDirectory = '$WorkspaceBuildDir$/$Kind_ImpLibDir$/$Platform$-$Config$/$ProjectName$'
        .ProjectConfigurationTargets = { }

        .ConfigurationBuildDependencies = {}
        .ConfigurationLinkDependencies = {}
        .ConfigurationRuntimeDependencies = {}

        // Build dependency lists
        //--------------------------------------------------------------------------
        {
            .Build = {}
            .Link = {}
            .Runtime = {}
            Using( .Dependencies )

            .Vars = { 'Build', 'Link', 'Runtime' }
            ForEach( .Var in .Vars )
            {
                ForEach( .Dependency in .'$Var$' )
                {
                    ^'Configuration$Var$Dependencies' + '$Dependency$-$Platform$-$Config$'
                }
            }
        }

        // Compiler flags
        //--------------------------------------------------------------------------
        {
            .Variables = {
                'IncludeDirs'
                'Defines'
                'CompilerFlags'
                'Libs'
                'LibDirs'
            }

            ForEach( .Var in .Variables )
            {
                Using( .'Flags_$Var$' )
                ForEach( .Value in .'$Var$' )
                {
                    ^'$FlagTargetVar$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                }
            }
        }

        // Conan Modules
        //--------------------------------------------------------------------------
        ForEach( .ConanModule in .ProjectConanModules )
        {
            Using( .'ConanModule_$ConanModule$_$ConanConfig$' )

            ForEach( .OptionName in .Conan_OptionNames )
            {
                Using( .'Flags_$OptionName$' )
                ForEach( .Value in .'$OptionName$' )
                {
                    ^'$FlagTargetVar$' + ' $FlagPrefix$$Value$$FlagSuffix$'
                }
            }

            If ( .CopyModules )
            {
                .CopyDirs = false
                .CopyDirsList = { }
                ForEach( .BinDir in .BinDirs )
                {
                    ^CopyDirs = true
                    ^CopyDirsList + "$BinDir$/"
                }

                If ( .CopyDirs )
                {
                    CopyDir( '$ProjectName$-$Platform$-$Config$-$ConanModule$-copydir' )
                    {
                        .SourcePaths = .CopyDirsList
                        .SourcePathsPattern = '*.dll'
                        .Dest = .ConfigurationTargetDirectory
                    }
                    ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-$ConanModule$-copydir'
                }
            }
        }

        {
            .CompilerOptions + ' /I"$ProjectBaseDir$/public"'
            .CompilerOutputPath = .ConfigurationIntermediateDirectory
            .CompilerInputUnity = { }
            .CompilerInputPath = { '$ProjectBaseDir$/private' }
            .CompilerInputPattern = '*.cxx'

            // Unity files
            //--------------------------------------------------------------------------
            If ( .UnityBuilds )
            {
                Unity( '$ProjectName$-$Platform$-$Config$-unity' )
                {
                    .UnityInputPath = '$ProjectBaseDir$/private'
                    .UnityInputPattern = { '*.cxx' }
                    .UnityOutputPath = .ConfigurationIntermediateDirectory
                }

                // Reset compiler input paths
                ^CompilerInputUnity = '$ProjectName$-$Platform$-$Config$-unity'
                ^CompilerInputPath = { }
            }

            // Object list
            //--------------------------------------------------------------------------
            ObjectList( '$ProjectName$-$Platform$-$Config$-objects' )
            {
            }
        }

        // Library target
        //--------------------------------------------------------------------------
        If ( .ProjectKind == .Kind_StaticLib )
        {
            Library( '$ProjectName$-$Platform$-$Config$-link' )
            {
                .CompilerOutputPath = .ConfigurationIntermediateDirectory

                .LibrarianAdditionalInputs = '$ProjectName$-$Platform$-$Config$-objects'
                .LibrarianOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
            }
            ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
        }

        // DLL target
        //--------------------------------------------------------------------------
        If ( .ProjectKind == .Kind_SharedLib )
        {
            DLL( '$ProjectName$-$Platform$-$Config$-link' )
            {
                .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
                ForEach( .Library in .LibraryTargets )
                {
                    ^Libraries + '$Library$-$Platform$-$Config$-link'
                }

                .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
                .LinkerOptions + ' /DLL'
            }
            ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
        }

        // Executable targets
        //--------------------------------------------------------------------------
        If ( .ProjectKind == .Kind_ConsoleApp )
        {
            Executable( '$ProjectName$-$Platform$-$Config$-link' )
            {
                .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
                ForEach( .Library in .LibraryTargets )
                {
                    ^Libraries + '$Library$-$Platform$-$Config$-link'
                }

                .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
                .LinkerOptions + ' /SUBSYSTEM:CONSOLE'
            }
            ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
        }
        If ( .ProjectKind == .Kind_WindowedApp )
        {
            Executable( '$ProjectName$-$Platform$-$Config$-link' )
            {
                .Libraries = { '$ProjectName$-$Platform$-$Config$-objects' }
                ForEach( .Library in .LibraryTargets )
                {
                    ^Libraries + '$Library$-$Platform$-$Config$-link'
                }

                .LinkerOutput = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'
                .LinkerOptions + ' /SUBSYSTEM:WINDOWS'
            }
            ^ProjectConfigurationTargets + '$ProjectName$-$Platform$-$Config$-link'
        }

        // VCXProjectConfiguration
        If ( .System_Windows in .ConfigurationTags )
        {
            .ProjectVCXConfig =
            [
                .PlatformToolset = 'v141'

                .Platform = .Platform
                .Config = .Config
                .Target = '$ProjectName$-$Platform$-$Config$-objects'

                .IntermediateDirectory = .ConfigurationIntermediateDirectory
                .OutputDirectory = .ConfigurationTargetDirectory
                .Output = '$ConfigurationTargetDirectory$/$ProjectName$$OutputExtension$'

                .ProjectBuildCommand = '$VSBuildCommand$ $ProjectName$-$Platform$-$Config$'
                .ProjectRebuildCommand = '$VSRebuildCommand$ $ProjectName$-$Platform$-$Config$'
            ]
            ^ProjectVCXConfigs + .ProjectVCXConfig
        }

        // Target alias
        //--------------------------------------------------------------------------
        Alias( '$ProjectName$-$Platform$-$Config$' )
        {
            .Targets = .ProjectConfigurationTargets
                + .ConfigurationRuntimeDependencies
        }

        // Target alias lists
        //--------------------------------------------------------------------------
        .TargetsList =
        [
            .'Targets_$Platform$_$Config$' = '$ProjectName$-$Platform$-$Config$'
        ]
        ^TargetsLists + .TargetsList
    }

    // Create vcxproject target
    //--------------------------------------------------------------------------
    VCXProject( '$ProjectName$-vcxproj' )
    {
        .ProjectOutput = '$ProjectName$.vcxproj'
        .ProjectConfigs = .ProjectVCXConfigs
        .ProjectInputPaths = .ProjectBaseDir
        .ProjectBasePath = .ProjectBaseDir
    }
    ^SolutionProjects + '$ProjectName$-vcxproj'
}


// Create solution target
//--------------------------------------------------------------------------
{
    .SolutionConfigs = {}

    ForEach( .Configuration in .Configurations )
    {
        Using( .Configuration )

        .SolutionConfig =
        [
            .Platform = .Platform
            .Config = .Config
        ]
        ^SolutionConfigs + .SolutionConfig
    }

    // Create solution targets
    //--------------------------------------------------------------------------
    VSSolution( 'solution' )
    {
        .SolutionOutput = '../IceShard.sln'

        .SolutionFolders = .SolutionFolders
        .SolutionProjects = .SolutionProjects
        .SolutionBuildProject = { 'test-vcxproj' }
    }
}


// All alliases
//--------------------------------------------------------------------------
{
    .AllTargets = { }
    Using( .TargetsLists )
    ForEach( .Configuration in .Configurations )
    {
        Using( .Configuration )
        Alias( 'all-$Platform$-$Config$' )
        {
            .Targets = .'Targets_$Platform$_$Config$'
            ^AllTargets + .Targets
        }
    }
    Alias( 'all' )
    {
        .Targets = .AllTargets
    }
}
